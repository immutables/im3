# Please! We need to manage git ignore file so it will contain a minimal set of non-nonsense entries.
# Such minimal and precise exclusion list help reveal misbehaving / misconfigured tools
# and scripts, instead of blindly sweep problems under the rug.
#
# When adding entries here, please, do your best to briefly specify:
# * Which program generates or uses this kind of file
# * Why these files are kept out of the repo
# * Be precise about directories by placing leading / trailing slash where needed
#
# Quick reference on slashes:
# - Having a slash in front means that exclusion will only work on the top/root level
# of the repo. Otherwise we will ignore entries at arbitrary level of nesting.
# - Having a trailing slash means that exclusion will work only on directories.

# Executions of ad-hoc scripts and binaries allowed to create various temporary
# logs or stdout/stderr dumps in working directories
# We exclude them and ask to stick to this convention of using these filename extensions:
*.out
*.err
*.log

# JVM specific dumps and crash reports
# TODO add threaddump / crash dump filenames/extensions
*.hprof

# Folders for placing downloaded or generated tools, scripts or repos
# which are not part of the hermetic CI build.
# Can be present on different levels of nesting
.build/

# Folder which contains module/repackaged jars
# Excluded here, but better to be committed for the reproducible build
/lib/

# Buck (or other tools) local config customizations
# Manually created to override main config, local and specific to a user
# Should be managed / backed up manually and outside ot the repo
*.local

# !DEPRECATED buck not in use
# Buck directories for daemon and build output
# Auto created when running builds, present only in root
/.buckd/
/buck-out/

# !DEPRECATED? maven not in use
# Maven output directory in case we run some maven commands
target/

# !DEPRECATED? conventions to be revised
# Symlinks for downloaded/output jars and generated source folders
# for convenience of IDEs and ad-hoc tools.
# Created in the directories along BUCK files containing
# remote_file/java_binary rules which produce local jar files.
# Regenerated by calling `node up --lib --intellij`
.jars/
*-gen/
*-gen[123]/

_gen/

# Jetbrains Intellij IDEA project and module files,\.
# Can be present on different levels of nesting.
# Can be regenerated `node up --intellij` or recreated in Intellij
# TMP
.idea/
*.iml

# Eclipse project and module definitions
# Can be regenerated by `node up --eclipse` or created in Eclipse
.classes/
.settings/
.factorypath
.classpath
.project
.externalToolBuilders

# VS Code etc
.vscode/

# MacOS custom file/folder attributes, irrelevant to the repo
.DS_Store

# Parcels tmp files
.parcel-cache/
/dist/
