[import
	java.util.*
	io.immutables.build.build.*;
]

[generate(List<GenModule> modules)]
	[for m : modules]
		[gradleModule(m)]
	[/for]

	[metainfService("stencil/template",
		"javax.annotation.processing.Processor", _)]
io.immutables.stencil.template.Processor
	[/]

	[metainfService("codec",
  		"io.immutables.codec.record.MetadataProvider", _)]
io.immutables.codec.record.DefaultMetadataProvider
  [/]

[/]

[gradleIncrementalProcessor(String modulePath, Object processors)]
[-- io.immutables.stencil.template.Processor]
[files.path(
	"rel/mod/", modulePath,
	"/src/main/resources/META-INF/gradle/incremental.annotation.processors").content _]
[processors]
[//]

[metainfService(String modulePath, String interfaceType, Object implementations)]
[files.path(
	"rel/mod/", modulePath,
	"/src/main/resources/META-INF/services/", interfaceType).content _]
[implementations]
[//]

[gradleModule(GenModule m)]
[print _]
[m.name]: generating
[/]
    [copyJava(m)]
    [gradleBuild(m)]
[/]

[gradleBuild(GenModule m)]
[files.path("rel/mod/", m.path, "/build.gradle").content _]
// [m.name]
dependencies {
[for d : m.dependencies]
	[if d.module::<SourceModule sm>]
	[scope(d, m)] project(":[sm.relative.toString.replace('/', '.')]")
	[else if d.module::<VendorModule vm>]
	[for jar : vm.classJars]
	[scope(d, m)] "[jar.gav]"
	[/for]
	[/if]
[/for]
}
[//]

[scope(Dependency d, GenModule m)][void]
[m.shortName.equals("meta")?]api[:][d.isStatic?]compileOnly[:]implementation[//]
[//]
